---
# tasks file for reboot
- name: Collecting current uptime
#  shell: cat /proc/uptime | awk -F . '{print $1}'
  shell: /usr/bin/uptime | grep -ohe 'up .*' | sed 's/,//g' | awk '{ print $2" "$3 }'
  register: uptime
  become: yes
  tags: reboot
#  register: uptimebeforereboot
- debug:
    msg: "Before reboot, server uptime is {{ uptime.stdout  }}"
- name: Rebooting system
  shell: sleep 2 && shutdown -r now "Ansible triggered reboot"
  async: 1
  poll: 0
  ignore_errors: true
  tags: reboot
- name: Waiting for server to come back
  wait_for:
   host: "{{ inventory_hostname }}"
   port: 22
   state: started
   delay: 120
   timeout: 360
  delegate_to: 127.0.0.1
  tags: reboot
- name: Verify a reboot was actually initiated
#  shell: (( `cat /proc/uptime | awk -F . '{print $1}'` < {{ uptime.stdout }} ))
  shell: /usr/bin/uptime | grep -ohe 'up .*' | sed 's/,//g' | awk '{ print $2" "$3 }'
  become: yes
  tags: reboot
  register: uptimeafterreboot
- debug:
    msg: "After reboot, server uptime is {{ uptimeafterreboot.stdout  }}"
# uptime after reboot should be smaller than before reboot
#  local_action: wait_for host={{ inventory_hostname }} state=started delay=30 timeout=120
#  become: yes

